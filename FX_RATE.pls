--SYSDATE()$}
--{$SYSDATE()-5$}

WITH P AS (
SELECT
--A.DATE_FROM,
A.DATE_TO,
A.CONVERSION_DATE,
A.DATE_TO AS CURR_DATE,
A.PREV_DATE AS PREV_DATE,
A.PREV_5D,
TO_CHAR (ADD_MONTHS (A.DATE_TO, -0), 'YYYYMM') AS CURR_PERIOD,
TO_CHAR (ADD_MONTHS (A.DATE_TO, -1), 'YYYYMM') AS PREV_PERIOD
FROM (
SELECT
--TO_CHAR(:DATE_FROM,'YYYY-MM-DD') AS DATE_FROM,
TO_CHAR(:CONVERSION_DATE,'YYYY-MM-DD') AS DATE_TO,
TO_CHAR(:CONVERSION_DATE,'YYYY-MM-DD') AS CONVERSION_DATE,
TO_CHAR(:CONVERSION_DATE-1,'YYYY-MM-DD') AS PREV_DATE,
TO_CHAR(:CONVERSION_DATE-5,'YYYY-MM-DD') AS PREV_5D
FROM DUAL)A)

,DS AS (
SELECT FXDS.*,
CASE WHEN FXDS.CONVERSION_DATE=FXDS.DATE_TO THEN 'T0'
WHEN FXDS.CONVERSION_DATE=FXDS.PREV_DATE THEN 'T-1' ELSE 'N/A'
END AS FLAG,
ROW_NUMBER() OVER (PARTITION BY FXDS.SOURCE, FXDS.CREATION_DATE_SHORT, FXDS.CURR_PAIR ORDER BY FXDS.CONVERSION_DATE ASC) AS RNA,
ROW_NUMBER() OVER (PARTITION BY FXDS.SOURCE, FXDS.CREATION_DATE_SHORT, FXDS.CURR_PAIR ORDER BY FXDS.CONVERSION_DATE DESC) AS RND
FROM (
SELECT GLDR.RATE_SOURCE_CODE,
--GLDCT.CONVERSION_TYPE,
GLDCT.USER_CONVERSION_TYPE AS SOURCE,
GLDCT.DESCRIPTION,
GLDR.FROM_CURRENCY,
GLDR.TO_CURRENCY,
GLDR.STATUS_CODE,
GLDR.FROM_CURRENCY||'-'||GLDR.TO_CURRENCY AS CURR_PAIR,
GLDR.CONVERSION_RATE,
TO_CHAR(GLDR.CONVERSION_DATE,'YYYY-MM-DD') AS CONVERSION_DATE,
GLDR.CONVERSION_DATE AS CONVERSION_DATE_SHORT,
GLDR.CREATION_DATE,
TO_CHAR(GLDR.CREATION_DATE,'YYYY-MM-DD') AS CREATION_DATE_SHORT,
GLDR.CREATION_DATE + (1/24*8) AS CREATION_DATE_GMT8,
TO_DATE(GLDR.CREATION_DATE + (1/24*8),'YYYY-MM-DD') AS CREATION_DATE_GMT8_SHORT,
GLDR.CREATED_BY,
GLDR.LAST_UPDATE_DATE,
GLDR.LAST_UPDATE_DATE + (1/24*8) AS LAST_UPDATE_DATE_GMT8,
GLDR.LAST_UPDATED_BY,
GLDCT.ENABLE_CROSS_RATE_FLAG,
GLDCT.SEED_DATA_SOURCE,
(SELECT DATE_TO FROM P) AS DATE_TO,
(SELECT PREV_DATE FROM P) AS PREV_DATE
FROM GL_DAILY_RATES GLDR
LEFT JOIN GL_DAILY_CONVERSION_TYPES GLDCT
ON GLDR.CONVERSION_TYPE=GLDCT.CONVERSION_TYPE)FXDS
WHERE FXDS.SOURCE IN (:CURR_SOURCE)
AND FXDS.CURR_PAIR IN (:CURR_PAIR)
AND FXDS.CREATION_DATE_SHORT BETWEEN (SELECT PREV_5D FROM P) AND (SELECT DATE_TO FROM P)
ORDER BY FXDS.SOURCE, FXDS.CURR_PAIR, FXDS.CREATION_DATE_GMT8 DESC, FXDS.CONVERSION_DATE DESC)

,DS_SUM AS (
SELECT DS2.* FROM (
SELECT DS1.*,
ROW_NUMBER() OVER (PARTITION BY DS1.SOURCE, DS1.CURR_PAIR ORDER BY DS1.CREATION_DATE_SHORT ASC) AS GRNA,
ROW_NUMBER() OVER (PARTITION BY DS1.SOURCE, DS1.CURR_PAIR ORDER BY DS1.CREATION_DATE_SHORT DESC) AS GRND
FROM (
SELECT DS.SOURCE, DS.CURR_PAIR, DS.CONVERSION_RATE, DS.CONVERSION_DATE, DS.CONVERSION_DATE_SHORT,
DS.CREATION_DATE, DS.CREATION_DATE_SHORT, DS.FLAG, DS.CREATION_DATE_GMT8, DS.CREATED_BY,
DS.LAST_UPDATE_DATE, DS.LAST_UPDATE_DATE_GMT8, DS.LAST_UPDATED_BY,
DS.RNA, DS.RND
FROM DS DS
WHERE DS.RNA=1
ORDER BY DS.SOURCE, DS.CURR_PAIR, DS.CREATION_DATE_SHORT DESC, DS.CONVERSION_DATE DESC
)DS1)DS2)

,DS_SUM_CD AS (
SELECT DS_SUM.* FROM DS_SUM DS_SUM
--WHERE DS_SUM.GRND=1
WHERE DS_SUM.FLAG='T0'
)

,DS_SUM_PD AS (
SELECT DS_SUM.* FROM DS_SUM DS_SUM
--WHERE DS_SUM.GRND=2
WHERE DS_SUM.FLAG='T-1'
)

,DS_AVG AS (
SELECT DS_SUM.SOURCE,
DS_SUM.CURR_PAIR,
DS_SUM.CONVERSION_RATE AS CONVERSION_RATE
FROM DS_SUM DS_SUM WHERE DS_SUM.GRND>1
)

,DS_SUM_AVG AS (
SELECT DS_AVG.SOURCE, DS_AVG.CURR_PAIR,
(SELECT P.CONVERSION_DATE FROM P P) AS CONVERSION_DATE,
COUNT(DS_AVG.CONVERSION_RATE) AS RATE_COUNT,
ROUND(AVG(DS_AVG.CONVERSION_RATE),4) AS CONVERSION_RATE
FROM DS_AVG DS_AVG
GROUP BY DS_AVG.SOURCE, DS_AVG.CURR_PAIR
)


,DS_RPT1 AS (
SELECT DSR.* FROM (
SELECT AVG.SOURCE, AVG.CURR_PAIR, CD.CONVERSION_DATE, CD.CREATION_DATE, CD.FLAG,
ROUND(NVL(CD.CONVERSION_RATE,0),4) AS CURR_DAY_RATES,
ROUND(PD.CONVERSION_RATE,4) AS PREV_DAY_RATES,
ROUND((CD.CONVERSION_RATE-PD.CONVERSION_RATE),4) AS VS_PREV_DAY_VAR,
ROUND((CD.CONVERSION_RATE-PD.CONVERSION_RATE)/CD.CONVERSION_RATE*100,2) AS VS_PREV_DAY_VAR_PCT,
ROUND(AVG.CONVERSION_RATE,4) AS AVG_RATES,
ROUND((CD.CONVERSION_RATE-AVG.CONVERSION_RATE),4) AS VS_AVG_VAR,
ROUND((CD.CONVERSION_RATE-AVG.CONVERSION_RATE)/CD.CONVERSION_RATE*100,2) AS VS_AVG_VAR_PCT
FROM  DS_SUM_AVG AVG
LEFT JOIN DS_SUM_PD PD ON AVG.SOURCE = PD.SOURCE AND AVG.CURR_PAIR = PD.CURR_PAIR
LEFT JOIN DS_SUM_CD CD ON AVG.SOURCE = CD.SOURCE AND AVG.CURR_PAIR = CD.CURR_PAIR
)DSR)


--SELECT 'DATE' AS T, P.* FROM P P
--SELECT 'DS' AS T, DS.* FROM DS DS
--SELECT 'DS_SUM' AS T, DS_SUM.* FROM DS_SUM DS_SUM
--SELECT 'DS_SUM_CD' AS T, DS_SUM_CD.* FROM DS_SUM_CD DS_SUM_CD
--SELECT 'DS_SUM_PD' AS T, DS_SUM_PD.* FROM DS_SUM_PD DS_SUM_PD
--SELECT 'DS_AVG' AS T, DS_AVG.* FROM DS_AVG DS_AVG
--SELECT 'DS_SUM_AVG' AS T, DS_SUM_AVG.* FROM DS_SUM_AVG DS_SUM_AVG
--SELECT 'DS_RPT1' AS T, DS_RPT1.* FROM DS_RPT1 DS_RPT1
--SELECT 'DS_RPT1A' AS T, DS_RPT1A.* FROM DS_RPT1A DS_RPT1A

SELECT 'DS_RPT2' AS T, DS_RPT1.SOURCE,
DS_RPT1.CURR_PAIR,
DS_RPT1.CONVERSION_DATE,
DS_RPT1.CREATION_DATE,
DS_RPT1.FLAG,
ROUND(DS_RPT1.CURR_DAY_RATES,4) AS CURR_DAY_RATES,
ROUND(DS_RPT1.PREV_DAY_RATES,4) AS PREV_DAY_RATES,
ROUND(DS_RPT1.VS_PREV_DAY_VAR,2) AS VS_PREV_DAY_VAR,
ROUND(DS_RPT1.VS_PREV_DAY_VAR_PCT,2) AS VS_PREV_DAY_VAR_PCT,
ROUND(DS_RPT1.AVG_RATES,4) AS AVG_RATES,
ROUND(DS_RPT1.VS_AVG_VAR,2) AS VS_AVG_VAR,
ROUND(DS_RPT1.VS_AVG_VAR_PCT,2) AS VS_AVG_VAR_PCT,
CASE WHEN DS_RPT1.FLAG IS NULL THEN 'MISSING FX'
WHEN (DS_RPT1.VS_PREV_DAY_VAR_PCT <-5 OR DS_RPT1.VS_PREV_DAY_VAR_PCT >5) THEN '+- 5% VARIANCE'
WHEN (DS_RPT1.VS_AVG_VAR_PCT <-5 OR DS_RPT1.VS_AVG_VAR_PCT >5) THEN '+- 5% VARIANCE'
WHEN DS_RPT1.PREV_DAY_RATES=DS_RPT1.CURR_DAY_RATES THEN 'SAME RATE AS PREV DAY'
ELSE ' OK or N/A' END AS STATUS
FROM DS_RPT1 DS_RPT1
